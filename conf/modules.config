/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC_RAW {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_raw" }
        tag = { "${meta.id}_raw" }
    }

    withName: FASTQC_PREPROCESSED {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc/preprocessed" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_preprocessed" }
        tag = { "${meta.id}_preprocessed" }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BWAMEM2_HOST_REMOVAL_BUILD' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWAMEM2_HOST_REMOVAL_ALIGN' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWAMEM2_BUILD' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWAMEM2_ALIGN' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWA_BUILD' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWA_ALIGN' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'ALIGNCOV' {
        publishDir = [
            path: { "${params.outdir}/aligncov/${params.aligner}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'PREPROCESS_STATS' {
        publishDir = [
        path: { "${params.outdir}/preprocess_stats" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KMA_INDEX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'KMA_ALIGN' {
        ext.args = '-mem_mode -ex_mode -1t1'
        publishDir = [
        path: { "${params.outdir}/kma" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        pattern: "*.{res}"
        ]
    }

    withName: 'KMA_SAM_TO_SORTED_BAM' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:.*:BAM_STATS_SAMTOOLS:.*' {
        publishDir = [
            path: { "${params.outdir}/samtools_stats/${params.aligner}" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'SAMTOOLS_INDEX' {
        ext.args = '-b'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'FASTP' {
        publishDir = [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{html,log}"
        ]
    }

    withName: 'MOSDEPTH' {
        publishDir = [
            path: { "${params.outdir}/mosdepth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERGE_MAPPING_RESULTS' {
        ext.args = { [
            "--len_cov_threshold=${params.len_cov_threshold}",
            "--prop_cov_threshold=${params.prop_cov_threshold}",
            "--fold_cov_threshold=${params.fold_cov_threshold}",
            "--mapped_reads_threshold=${params.mapped_reads_threshold}",
            params.pident_threshold ? "--percent_identity_threshold=${params.pident_threshold}" : '',
            ].join(' ').trim() }
        publishDir = [
        path: { "${params.outdir}/merged-results" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        pattern: "*.tsv"
        ]
    }

}
